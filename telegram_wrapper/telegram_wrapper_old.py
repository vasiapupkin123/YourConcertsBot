# coding: utf-8
# telegram
import json
import os
from time import strftime  # –¥–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è

from numpy import cumsum
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler

from concerts import SeatscanGrabber
from vkontakte import VKGrabber

# consts
MSG_LIMIT_TELEGRAM = 4095
CREATOR_CHAT_ID = 34600304
TG_TOKEN = '228172322:AAG620f2nZUQqMxAf4ux9SxrFcyDZmFmuzQ'
HELP_TEXT = u"""–Ø –ø–æ–∫–∞–∂—É —Ç–µ–±–µ:
üî∏ –±–ª–∏–∂–∞–π—à–∏–µ –∫–æ–Ω—Ü–µ—Ä—Ç—ã –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–π —Ç–æ–±–æ–π –≥—Ä—É–ø–ø—ã
üî∏ —Ç–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π –≤–∫, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª—É—à–∞—é—Ç —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –º–æ–≥—É—Ç —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–±–µ –∫–æ–º–ø–∞–Ω–∏—é
üî∏ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç —á–µ–ª–æ–≤–µ–∫–∞ =) –∫–∏–Ω—å –Ω–∞ –Ω–µ–≥–æ —Å—Å—ã–ª–∫—É –∏–ª–∏, –µ—Å–ª–∏ —ç—Ç–æ —Ç–≤–æ–π –¥—Ä—É–≥, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –µ–≥–æ –∏–º—è
üî∏ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤ –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏–∑ —Ç–≤–æ–µ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≥–æ—Ä–æ–¥–∞—Ö /concerts

–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞ –º–æ–∂–Ω–æ –∑–¥–µ—Å—å: /settings"""
# üî∏ –∫–æ–Ω—Ü–µ—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –∏ —Ç–µ–±–µ, –∏ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–æ–±–æ–π –¥—Ä—É–∑—å—è–º /together
ABOUT_TEXT = u"""Concerts worth spreading"""
START_TEXT = u"üôã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–µ–±–µ –∫–æ–Ω—Ü–µ—Ä—Ç—ã –∏ –∫–æ–º–ø–∞–Ω–∏—é —Ç–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π –Ω–∞ –Ω–∏—Ö.\n–¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞—Ç—å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –æ—Ç –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤ —Å—Ç–∞–ª–æ –ø—Ä–æ—â–µ!)\n\n" + HELP_TEXT + "\n\n–ï—Å–ª–∏ —Ç—ã –∑–∞—Ö–æ—á–µ—à—å —Å –∫–µ–º-—Ç–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º - –º–æ–∂–µ—à—å —Å–∫–∏–Ω—É—Ç—å —ç—Ç—É —Å—Å—ã–ª–∫—É:\nhttp://telegra.ph/YourConcertsBot-12-02"

# help_funcs
folder = 'concerts/'
artist_2_url_filename = folder + 'seatscan_artist_2_url_2.json'
artist_2_artist_filename = folder + 'seatscan_artist_2_artist.json'
artists_failed_filename = folder + 'seatscan_artists_that_failed.txt'
ssg = SeatscanGrabber(artist_2_url_json_filename=artist_2_url_filename,
                      artist_2_artist_json_filename=artist_2_artist_filename,
                      artists_that_failed_on_seatscan_filename=artists_failed_filename)
VK_PRIVATE_CREDENTIALS = json.loads(open('vkontakte/credentials.json').read())
vk_parser = VKGrabber(credentials=VK_PRIVATE_CREDENTIALS)


def split_msg(txt, size=MSG_LIMIT_TELEGRAM, delim='\n'):
    if len(txt) < size: return [txt]

    l = txt.split(delim)
    for p in l:
        if len(p) > size:
            return -1  # impossible then
            # may go into each p > 4095, change in loop there every last " " to "\n"
            # for poems may split firstly by "\n\n", only then inside by "\n", "."," "

    cs = cumsum([len(a) for a in l]) + range(0, len(l) * len(delim), len(delim))
    s = max(cumsum(cs <= size))

    resp = delim.join(l[:s])
    left = delim.join(l[s:])
    if len(left) < (size + 1):
        return [resp, left]
    else:
        return [resp] + split_msg(left, size, delim)


def send_splitted_msg(bot, chat_id, msg, msg_limit=4095, reply_markup=-1, delim='\n'):
    l = split_msg(msg, msg_limit, delim)
    if len(l) > 3: bot.sendMessage(chat_id, text='–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏ –±—É–¥–µ—Ç –æ–±—Ä–µ–∑–∞–Ω')
    if reply_markup == -1:
        for r in l[:3]:
            bot.sendMessage(chat_id, text=r)
    else:
        for r in l[:3]:
            bot.sendMessage(chat_id, text=r, reply_markup=reply_markup)


def msg_with_buttons(bot, update, text, options, chat_id=-1, message_id=-1):
    if chat_id == -1: chat_id = update.message.chat_id
    text = text[:4095]
    if len(options) > 0:
        buttons = [InlineKeyboardButton(o[0], callback_data=o[1][:30]) for o in options]
        keyboard = [[b] for b in buttons]  # customize form
        reply_markup = InlineKeyboardMarkup(keyboard)
        if message_id == -1:
            bot.sendMessage(chat_id=chat_id, text=text, reply_markup=reply_markup)
        else:
            bot.editMessageText(chat_id=chat_id, message_id=message_id, text=text, reply_markup=reply_markup)
    else:
        if message_id == -1:
            bot.sendMessage(chat_id=chat_id, text=text)
        else:
            bot.editMessageText(chat_id=chat_id, message_id=message_id, text=text)


def spy(bot, update, send2creator=True):
    try:
        user = update.message.from_user
    except:
        print('spy: nothing to get')
        return (False)

    if str(user.username) == 'NikitaKuznetsov': return (False)

    txt = update.message.text

    logtxt = ["–°–ª–µ–∂–∫–∞ time!"
        , "Time: " + strftime("%Y-%m-%d %H:%M:%S")
        , "User: " + str(user.first_name) + ' ' + str(user.last_name)
        , "Username: @" + str(user.username)
        , "Chat_id: " + str(update.message.chat_id)
        , "Text: " + txt]

    if send2creator:
        bot.sendMessage(CREATOR_CHAT_ID, text="\n".join(logtxt))
    text_file = open('log.txt', "a")
    text_file.write("\n" + "; ".join(logtxt))
    text_file.close()


def slash_feedback(bot, update):
    spy(bot, update)
    chat_id = update.message.chat_id
    lang_chat = 'ru'
    txt = update.message.text
    if txt[:9] == '/feedback' and len(txt) > 9:
        bot.sendMessage(chat_id, text='–°–ø–∞—Å–∏–±–æ, —Å –∏–Ω—Ç–µ—Ä–µ—Å–æ–º –æ–∑–Ω–∞–∫–æ–º–ª—é—Å—å!')
    else:
        bot.sendMessage(chat_id,
                        text="–õ—é–±–ª—é –æ—Ç–∑—ã–≤—á–∏–≤—ã—Ö –ª—é–¥–µ–π. –ü–∏—à–∏ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è, –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä—è–º–æ —Å—é–¥–∞, –Ω–∞—á–∏–Ω–∞—è —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ—Ç–∫–æ–π /feedback, —è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Ö –ø–æ–ª—É—á—É –∏ –ø—Ä–æ—á–∏—Ç–∞—é. –°–ø–∞—Å–∏–±–æ!")


def slash_start(bot, update):
    spy(bot, update)
    chat_id = update.message.chat_id
    bot.sendMessage(chat_id, text=START_TEXT)


def slash_help(bot, update):
    spy(bot, update)
    chat_id = update.message.chat_id
    bot.sendMessage(chat_id, text=HELP_TEXT)


def slash_about(bot, update):
    spy(bot, update)
    bot.sendMessage(update.message.chat_id, text=ABOUT_TEXT)


def slash_error(bot, update, error):
    logtxt = ('Update "%s" caused error "%s"' % (update, error))
    # with open('log.txt', "a") as text_file:
    #    text_file.write("\n" + logtxt)
    if 'Bad Request: Input message content is not specified' not in logtxt:
        print(logtxt)


def slash_concerts(bot, update):
    spy(bot, update)
    chat_id = update.message.chat_id
    filename = 'userdata/concerts/' + str(chat_id) + '.json'
    delim = '\n---\n'
    if os.path.exists(filename):
        concerts = json.loads(open(filename).read())
        user_settings = get_settings(chat_id)
        # —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–µ–µ
        unfollowed = [artist.lower() for artist in user_settings['unfollow']]
        if len(unfollowed)>0:
            concerts = [concert for concert in concerts if concert['artist'].lower() not in unfollowed]
        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        resp = ssg.get_text_from_concerts_list(events=concerts, cities=user_settings['city'], delim=delim)
        if len(resp) == 0:
            bot.sendMessage(update.message.chat_id, text='–ù–µ—Ç –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö')
            return False
        bot.sendMessage(update.message.chat_id, text='üé∑ –¢–≤–æ—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –∞—Ñ–∏—à–∞ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤:')
        send_splitted_msg(bot, chat_id, resp, delim=delim)
    else:
        resp = '–ë–∞–∑–∞ –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤ –ø–æ —Ç–≤–æ–∏–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º –µ—â—ë –Ω–µ —Å–æ–±—Ä–∞–Ω–∞, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è. –ù–∞—á–∞—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ?'
        msg_with_buttons(bot, update, text=resp,
                         options=[['–î–∞', 'download_concerts_yes'], ['–ù–µ—Ç', 'download_concerts_no']])


def set_vk_profile(bot, chat_id, text):
    vk_info = vk_parser.get_user_info(text)
    vk_id = vk_info['uid']
    if not vk_id:
        bot.sendMessage(chat_id, text='–£–∫–∞–∂–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ –≤–∫. –£–∫–∞–∑–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑')
        return False
    d = get_settings(chat_id)
    d['vk']['id'] = vk_id
    d['vk']['name'] = vk_info['first_name'] + ' ' + vk_info['last_name']
    d['vk']['url'] = 'https://vk.com/id' + str(vk_id)
    d['chat_state'] = ''
    set_settings(chat_id, d)
    bot.sendMessage(chat_id, text='–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω. –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–±—è: https://vk.com/id%d' % vk_id)
    TOP_NUM = 10
    PRE_COMMENT = '–ú–∞–ª–µ–Ω—å–∫–∏–π –±–æ–Ω—É—Å, —Ç–æ–ø-%d –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –ø–æ —Ç–≤–æ–∏–º –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—è–º:' % TOP_NUM
    POST_COMMENT = '–¢—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ø –∏ –ø–æ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º VK, –ø—Ä–æ—Å—Ç–æ –∫–∏–¥–∞–π —Å—é–¥–∞ –Ω–∞ –Ω–∏—Ö —Å—Å—ã–ª–∫—É. –ò–º–µ–Ω–Ω–æ —Å—Å—ã–ª–∫—É'
    audios_top = get_top_artists_string(vk_id, TOP_NUM, PRE_COMMENT, POST_COMMENT)
    if audios_top:
        bot.sendMessage(chat_id, text=audios_top)
    return True


def get_top_artists_string(query, top_num=10, pre_comment=None, post_comment=None):
    audios_top = vk_parser.get_artists_popularity(query)
    if not audios_top:
        return None
    resp = '\n'.join([artist[0] + ' - ' + str(artist[1]) for artist in audios_top[:top_num]])
    if pre_comment:
        resp = pre_comment + '\n\n' + resp
    if post_comment:
        resp = resp + '\n\n' + post_comment
    return resp


def inside_idle(bot, update, text=-1, chat_id=-1):
    TEXT_IF_NOTHING_FOUND = u'–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å'

    if text == -1:
        text = update.message.text
    if chat_id == -1:
        chat_id = update.message.chat_id
    d = get_settings(chat_id)
    chat_state = d['chat_state']

    if chat_state == 'settings-city-add':
        txt = text.replace(',', ' ').replace(';', ' ').replace('.', ' ').replace('\n', ' ').split()
        d['city'] = list(set([i.capitalize() for i in d['city'] + txt]))
        if '–ü–∏—Ç–µ—Ä' in d['city']:
            d['city'].remove('–ü–∏—Ç–µ—Ä')
            d['city'].append('–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥')
        if '–°–ø–±' in d['city']:
            d['city'].remove('–°–ø–±')
            d['city'].append('–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥')
        if '–ú—Å–∫' in d['city']:
            d['city'].remove('–ú—Å–∫')
            d['city'].append('–ú–æ—Å–∫–≤–∞')
        d['chat_state'] = ''
        set_settings(chat_id, d)
        resp = '–°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ —Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º–∏ –∫–æ–Ω—Ü–µ—Ä—Ç–∞–º–∏ –æ–±–Ω–æ–≤–ª—ë–Ω. –¢–µ–ø–µ—Ä—å –æ–Ω –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:\n' + ', '.join(d['city'])
        bot.sendMessage(chat_id, text=resp)
    elif chat_state == 'settings-follow-add':
        txt = text.replace(',', ' ').replace(';', ' ').replace('.', ' ').replace('\n', ' ').split()
        d['follow'] = list(set([i.capitalize() for i in d['follow'] + txt]))
        d['chat_state'] = ''
        set_settings(chat_id, d)
        resp = '–°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º–∏ –Ω—É–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∫ –≤–∫ —Å–ª–µ–¥–∏—Ç—å, –æ–±–Ω–æ–≤–ª—ë–Ω. –¢–µ–ø–µ—Ä—å –æ–Ω –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:\n' + ', '.join(
            d['follow'])
        bot.sendMessage(chat_id, text=resp)
    elif chat_state == 'settings-unfollow-add':
        txt = text.replace(',', ' ').replace(';', ' ').replace('.', ' ').replace('\n', ' ').split()
        d['unfollow'] = list(set([i.capitalize() for i in d['unfollow'] + txt]))
        d['chat_state'] = ''
        set_settings(chat_id, d)
        resp = '–°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, —á—å–∏ –∫–æ–Ω—Ü–µ—Ä—Ç—ã –Ω–µ –Ω—É–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å, –æ–±–Ω–æ–≤–ª—ë–Ω. –¢–µ–ø–µ—Ä—å –æ–Ω –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:\n' + ', '.join(
            d['unfollow'])
        bot.sendMessage(chat_id, text=resp)
    elif chat_state == 'settings-vk-set':
        set_vk_profile(bot, chat_id, text)
    elif chat_state == 'download_concerts_vk_yes_waiting':
        if set_vk_profile(bot, chat_id, text):
            download_and_show(bot, chat_id)
    else:
        if 'vk.com/' in text:
            TOP_NUM = 10
            resp = get_top_artists_string(text, TOP_NUM,
                                          pre_comment='–¢–æ–ø-%d –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª-–≤—É —Ç—Ä–µ–∫–æ–≤:' % TOP_NUM) or TEXT_IF_NOTHING_FOUND
        else:
            concerts = ssg.get_concerts(text, log_print_freq=1)
            resp = ssg.get_text_from_concerts_list(concerts, d['city'])
            if resp is None or resp.strip() == '':
                resp = u'–ö–æ–Ω—Ü–µ—Ä—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ :('
        bot.sendMessage(chat_id, text=resp)


def idle_main(bot, update):
    spy(bot, update)
    inside_idle(bot, update)


def download_and_show(bot, chat_id):
    TEXT_IF_NO_VK_AUDIOS = '–í–∏–¥–∏–º–æ, —É —Ç–µ–±—è –∑–∞–∫—Ä—ã—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ –∏ —è –Ω–µ —Å–º–æ–≥—É —Å–æ–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é'
    TEXT_IF_NO_AUDIOS = '–í–∏–¥–∏–º–æ, —É —Ç–µ–±—è –∑–∞–∫—Ä—ã—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ –∏ —è –Ω–µ —Å–º–æ–≥—É —Å–æ–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é'
    TEXT_IF_EMPTY_CITIES = '–†–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥–∞ –≤ /settings, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–æ–Ω—Ü–µ—Ä—Ç—ã'
    # –∫–∞—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ –≤–∫
    user_settings = get_settings(chat_id)
    artists = vk_parser.get_artists(user_settings['vk']['id'])
    print(len(artists))
    if TEXT_IF_NO_AUDIOS != '' and not artists:
        bot.sendMessage(chat_id, TEXT_IF_NO_VK_AUDIOS)
        return True
    artists = set([artist.lower() for artist in artists])
    # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤
    artists.update(set(user_settings['follow']))
    for artist2unfollow in user_settings['unfollow']:
        if artist2unfollow in artists:
            artists.remove(artist2unfollow)
    # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å —É—á—ë—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
    concerts = ssg.get_concerts(artists, log_print_freq=1, save_to_json_filename='userdata/concerts/%d.json' % chat_id)
    send_splitted_msg(bot, chat_id, ssg.get_text_from_concerts_list(concerts, user_settings['city']))
    if TEXT_IF_EMPTY_CITIES != '' and len(user_settings['city']) == 0:
        bot.sendMessage(chat_id, TEXT_IF_EMPTY_CITIES)


#### settings large menu

DEFAULT_SETTINGS = {
    'city': []
    , 'friends': []
    , 'sort_type': 'date'
    , 'sort_order': 'az'
    , 'vk': {'id': None, 'last_update': None, 'name': None, 'url': None}
    , 'chat_state': ''
    , 'follow': []
    , 'unfollow': []
}


def check_settings_existance(chat_id):
    return os.path.exists('userdata/settings/%d.txt' % chat_id)


def set_settings(chat_id, d=-1):
    try:
        f = open('userdata/settings/' + str(chat_id) + '.txt', 'w')
        if d == -1:
            d = DEFAULT_SETTINGS
        f.write(str(d))
    except:
        return False
    return True


def get_settings(chat_id):
    try:
        f = open('userdata/settings/' + str(chat_id) + '.txt')
        d = eval(f.read())
    except:
        f = open('userdata/settings/' + str(chat_id) + '.txt', 'w')
        d = DEFAULT_SETTINGS
        f.write(str(d))
    return d


def set_settings_field(chat_id, field, value):
    try:
        d = get_settings(chat_id)
        d[field] = value
        return set_settings(chat_id, d)
    except:
        return False


def button(bot, update, txt=None):
    query = update.callback_query
    if not txt:
        txt = query.data
    chat_id = query.message.chat_id

    if txt.startswith('vk.com/'):
        inside_idle(bot, update, txt, chat_id)
        return True
    if txt.startswith(str(CREATOR_CHAT_ID)+' '):
        inside_idle(bot, update, txt, chat_id)
        return True
    if txt in {'download_concerts_no', 'download_concerts_vk_no'}:
        bot.sendMessage(chat_id, '–•–æ—Ä–æ—à–æ, –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑.')
        return True
    if txt == 'download_concerts_yes':
        user_settings = get_settings(chat_id)
        vk_uid = user_settings['vk']['id']
        if not vk_uid:
            msg_with_buttons(bot=bot, update=update,
                             text='–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å VK. –ú–æ–∂–µ—à—å —Å–µ–π—á–∞—Å —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?',
                             options=[['–î–∞', 'download_concerts_vk_yes'], ['–ù–µ—Ç', 'download_concerts_vk_no']],
                             chat_id=chat_id)
            return True
        download_and_show(bot, chat_id)
        return True
    if txt == 'download_concerts_vk_yes':
        bot.sendMessage(chat_id, '–ö–∏–¥–∞–π —Å—Å—ã–ª–∫—É –Ω–∞ —Å–µ–±—è –≤–∫–æ–Ω—Ç–∞–∫—Ç–µ. –ò–ª–∏ id. –ò–ª–∏ –Ω–∏–∫–Ω–µ–π–º.')
        set_settings_field(chat_id, 'chat_state', 'download_concerts_vk_yes_waiting')
        return True
    text, options = settings_menu(txt, chat_id, bot)
    if len(text) > 0: msg_with_buttons(bot, update, text, options, chat_id, query.message.message_id)
    return True


def settings_menu(q, chat_id, bot):
    # ad-hoc func for inline button(): defines which text and buttons to send depending on entry inline query
    text = ''
    options = []
    if not check_settings_existance(chat_id):
        set_settings(chat_id)
    d = get_settings(chat_id)
    if q == 's':
        text = '–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:'
        text += '\n* –ì–æ—Ä–æ–¥–∞: '
        if len(d['city']) == 0:
            text += '–≤—Å–µ'
        else:
            text += ", ".join(d['city'])
        if d['vk']['id'] is None:
            text += '\n* –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞ vk.com: –Ω–µ —É–∫–∞–∑–∞–Ω'
        else:
            text += '\n* –ü—Ä–æ—Ñ–∏–ª—å: ' + d['vk']['name'] + ' (https://vk.com/id' + str(d['vk']['id']) + ')'
        options.append(['–ì–æ—Ä–æ–¥–∞', 'city'])
        options.append(['–ü—Ä–æ—Ñ–∏–ª—å vk', 'vk'])
        options.append(['–°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π', 'artists'])
    # cities story
    elif q == 's-city':
        text = '–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ —Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º–∏ –∫–æ–Ω—Ü–µ—Ä—Ç–∞–º–∏'
        options.append(['–î–æ–±–∞–≤–∏—Ç—å', 'add'])
        if len(d['city']) > 0:
            text += '. –í—ã–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞: %s' % ', '.join(d['city'])
            options.append(['–£–¥–∞–ª–∏—Ç—å', 'del'])
            options.append(['–£–¥–∞–ª–∏—Ç—å –≤—Å–µ', 'delall'])
    elif q == 's-city-add':
        set_settings_field(chat_id, 'chat_state', 'settings-city-add')
        bot.sendMessage(chat_id, text='–ö–∞–∫–æ–π –≥–æ—Ä–æ–¥ –¥–æ–±–∞–≤–∏—Ç—å? –ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ')
    elif q == 's-city-del':
        text = '–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∫–æ–Ω—Ü–µ—Ä—Ç—ã –±–æ–ª–µ–µ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å?'
        for city in d['city']:
            options.append([city, city])
    elif q == 's-city-delall':
        d['city'] = []
        set_settings(chat_id, d)
        text = '–°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –æ—á–∏—â–µ–Ω'
    elif q.startswith('s-city-del-'):
        city_to_delete = q[11:]
        cities = set(d['city'])
        try:
            cities.remove(city_to_delete)
        except:
            pass
        d['city'] = list(cities)
        set_settings(chat_id, d)
        text = '–ì–æ—Ä–æ–¥ %s —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –≥–æ—Ä–æ–¥–æ–≤' % city_to_delete
    # vk profile story
    elif q == 's-vk':
        if d['vk']['id'] is not None:
            text = '–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å: ' + d['vk']['name'] + ' (https://vk.com/id' + str(d['vk']['id']) + ')'
            options.append(['–ò–∑–º–µ–Ω–∏—Ç—å', 'set'])
            options.append(['–£–¥–∞–ª–∏—Ç—å', 'del'])
        else:
            text = '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω'
            options.append(['–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', 'set'])
    elif q == 's-vk-set':
        set_settings_field(chat_id, 'chat_state', 'settings-vk-set')
        bot.sendMessage(chat_id, text='–ö–∏–¥–∞–π —Å—Å—ã–ª–∫—É –Ω–∞ —Å–µ–±—è –≤–∫–æ–Ω—Ç–∞–∫—Ç–µ. –ò–ª–∏ id. –ò–ª–∏ –Ω–∏–∫–Ω–µ–π–º.')
    elif q == 's-vk-del':
        d['vk']['id'] = None
        set_settings(chat_id, d)
        try:
            os.remove('userdata/concerts/%d.json' % chat_id)
        except:
            pass
        text = '–ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª—ë–Ω. –ú–æ–∂–µ—à—å —É–∫–∞–∑–∞—Ç—å –µ–≥–æ –≤–Ω–æ–≤—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—Ç—Å—è'
    # artists set story
    elif q == 's-artists':
        text = '–í–Ω–æ—Å–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, –ø–æ–¥–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∏–∑ —Ç–≤–æ–∏—Ö –∞—É–¥–∏–æ –≤–∫. –£–∫–∞–∂–∏, –∫–æ–≥–æ —Å—Ç–æ–∏—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å, –¥–∞–∂–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∞—É–¥–∏–æ –≤–∫, –∏ –∫–æ–≥–æ –Ω–µ —Å—Ç–æ–∏—Ç, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Ç–æ, —á—Ç–æ –æ–Ω —Ç–∞–º –µ—Å—Ç—å. '
        options.append(['–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å', 'follow'])
        options.append(['–ù–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å', 'unfollow'])
    elif q == 's-artists-follow':
        text = '–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º–∏ —Å—Ç–æ–∏—Ç —Å–ª–µ–¥–∏—Ç—å –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤ —Å–ø–∏—Å–∫–µ –∞—É–¥–∏–æ –≤–∫'
        options.append(['–î–æ–±–∞–≤–∏—Ç—å', 'add'])
        if len(d['follow']) == 0:
            text += ', –ø—É—Å—Ç'
        else:
            text += ': %s' % ', '.join(d['follow'])
            options.append(['–£–¥–∞–ª–∏—Ç—å', 'del'])
            options.append(['–£–¥–∞–ª–∏—Ç—å –≤—Å–µ', 'delall'])
    elif q == 's-artists-follow-add':
        set_settings_field(chat_id, 'chat_state', 'settings-follow-add')
        bot.sendMessage(chat_id,
                        text='–ö–∞–∫–∏—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å—Ç–æ–∏—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å? –ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ')
    elif q == 's-artists-follow-del':
        text = '–ß—å–∏ –∫–æ–Ω—Ü–µ—Ä—Ç—ã –±–æ–ª—å—à–µ –Ω–µ –Ω–∞–¥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å?'
        for artist in d['follow']:
            options.append([artist, artist])
    elif q == 's-artists-follow-delall':
        d['follow'] = []
        set_settings(chat_id, d)
        text = '–°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—á–∏—â–µ–Ω'
    elif q == 's-artists-unfollow':
        text = '–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, —á—å–∏ –∫–æ–Ω—Ü–µ—Ä—Ç—ã –Ω–µ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å'
        options.append(['–î–æ–±–∞–≤–∏—Ç—å', 'add'])
        if len(d['unfollow']) == 0:
            text += ', –ø—É—Å—Ç'
        else:
            text += ': %s' % ', '.join(d['unfollow'])
            options.append(['–£–¥–∞–ª–∏—Ç—å', 'del'])
            options.append(['–£–¥–∞–ª–∏—Ç—å –≤—Å–µ', 'delall'])
    elif q == 's-artists-unfollow-add':
        set_settings_field(chat_id, 'chat_state', 'settings-unfollow-add')
        bot.sendMessage(chat_id,
                        text='–ß—å–∏ –∫–æ–Ω—Ü–µ—Ä—Ç—ã —Å—Ç–æ–∏—Ç —Å–∫—Ä—ã–≤–∞—Ç—å –∏–∑ –≤—ã–¥–∞—á–∏? –ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ')
    elif q == 's-artists-unfollow-del':
        text = '–ß—å–∏ –∫–æ–Ω—Ü–µ—Ä—Ç—ã –±–æ–ª—å—à–µ –Ω–µ –Ω–∞–¥–æ —Å–∫—Ä—ã–≤–∞—Ç—å –∏–∑ –≤—ã–¥–∞—á–∏?'
        for artist in d['unfollow']:
            options.append([artist, artist])
    elif q == 's-artists-unfollow-delall':
        d['unfollow'] = []
        set_settings(chat_id, d)
        text = '–°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—á–∏—â–µ–Ω'

    # adding path for every command
    for o in options:
        o[1] = q + '-' + str(o[1])
    # adding 'back' button to all menu's but start menu
    if q != 's':
        options = [['‚¨Ö', '-'.join(q.split('-')[:-1])]] + options
    return (text, options)


def slash_settings(bot, update):
    text, options = settings_menu('s', update.message.chat_id, bot)
    msg_with_buttons(bot, update, text, options)


def main():
    # Create the EventHandler and pass it your bot's token.
    updater = Updater(TG_TOKEN)

    # Get the dispatcher to register handlers
    dp = updater.dispatcher
    updater.dispatcher.add_handler(CallbackQueryHandler(button))

    # on different commands - answer in Telegram
    dp.add_handler(CommandHandler("start", slash_start), group=0)
    dp.add_handler(CommandHandler("help", slash_help), group=0)
    dp.add_handler(CommandHandler("feedback", slash_feedback), group=0)
    dp.add_handler(CommandHandler("about", slash_about), group=0)
    dp.add_handler(CommandHandler("settings", slash_settings), group=0)
    dp.add_handler(CommandHandler("concerts", slash_concerts), group=0)

    # on noncommand message
    dp.add_handler(MessageHandler(Filters.text, idle_main))

    # log all errors
    dp.add_error_handler(slash_error)

    # Start the Bot
    updater.start_polling()

    # Run the bot
    updater.idle()


### run
main()

# concerts - –∞—Ñ–∏—à–∞ —Ç–≤–æ–∏—Ö –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤
# settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
# help - —Å–ø—Ä–∞–≤–∫–∞
# feedback - –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –æ—Ç–∑—ã–≤–æ–º, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º, –∫—Ä–∏—Ç–∏–∫–æ–π
# about - –æ –±–æ—Ç–µ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ

# together - –∫–æ–Ω—Ü–µ—Ä—Ç—ã –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–∑—å—è–º–∏
# stat - –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏
# start - –Ω–∞—á–∞—Ç—å —Å –Ω–∞—á–∞–ª–∞
