# coding: utf-8
import json
import os
from time import strftime  # –¥–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from uuid import uuid4

from numpy import cumsum
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, InputTextMessageContent, InlineQueryResultArticle
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler, InlineQueryHandler

from grabber import TotalDefaultGrabber
from utils import get_full_path

MSG_LIMIT_TELEGRAM = 4095
HELP_TEXT = u"""–Ø –ø–æ–∫–∞–∂—É —Ç–µ–±–µ:
üî∏ –±–ª–∏–∂–∞–π—à–∏–µ –∫–æ–Ω—Ü–µ—Ä—Ç—ã –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–π —Ç–æ–±–æ–π –≥—Ä—É–ø–ø—ã
üî∏ —Ç–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π –≤–∫, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª—É—à–∞—é—Ç —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –º–æ–≥—É—Ç —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–±–µ –∫–æ–º–ø–∞–Ω–∏—é
üî∏ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç —á–µ–ª–æ–≤–µ–∫–∞ =) –∫–∏–Ω—å –Ω–∞ –Ω–µ–≥–æ —Å—Å—ã–ª–∫—É –∏–ª–∏, –µ—Å–ª–∏ —ç—Ç–æ —Ç–≤–æ–π –¥—Ä—É–≥, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –µ–≥–æ –∏–º—è
üî∏ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤ –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏–∑ —Ç–≤–æ–µ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≥–æ—Ä–æ–¥–∞—Ö /concerts

–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞ –º–æ–∂–Ω–æ –∑–¥–µ—Å—å: /settings"""
START_TEXT = u"üôã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–µ–±–µ –∫–æ–Ω—Ü–µ—Ä—Ç—ã –∏ –∫–æ–º–ø–∞–Ω–∏—é —Ç–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π –Ω–∞ –Ω–∏—Ö.\n–¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞—Ç—å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –æ—Ç –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤ —Å—Ç–∞–ª–æ –ø—Ä–æ—â–µ!)\n\n" + HELP_TEXT + "\n\n–ï—Å–ª–∏ —Ç—ã –∑–∞—Ö–æ—á–µ—à—å —Å –∫–µ–º-—Ç–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º - –º–æ–∂–µ—à—å —Å–∫–∏–Ω—É—Ç—å —ç—Ç—É —Å—Å—ã–ª–∫—É:\nhttp://telegra.ph/YourConcertsBot-12-02"
ABOUT_TEXT = u"""Concerts worth spreading"""


class TelegramWrapper(TotalDefaultGrabber):
    def __init__(self, TG_TOKEN, log_filename, feedback_filename):
        self.TG_TOKEN = TG_TOKEN
        self.log_filename = log_filename
        self.feedback_filename = feedback_filename
        self.DEFAULT_SETTINGS = {
            'city': []
            , 'friends': []
            , 'sort_type': 'date'
            , 'sort_order': 'az'
            , 'vk': {'id': None, 'last_update': None, 'name': None, 'url': None}
            , 'chat_state': ''
            , 'follow': []
            , 'unfollow': []
        }
        TotalDefaultGrabber.__init__(self)

    def split_msg(self, txt, size=MSG_LIMIT_TELEGRAM, delim='\n'):
        if len(txt) < size: return [txt]

        l = txt.split(delim)
        for p in l:
            if len(p) > size:
                return -1  # impossible then
                # may go into each p > 4095, change in loop there every last " " to "\n"
                # for poems may split firstly by "\n\n", only then inside by "\n", "."," "

        cs = cumsum([len(a) for a in l]) + range(0, len(l) * len(delim), len(delim))
        s = max(cumsum(cs <= size))

        resp = delim.join(l[:s])
        left = delim.join(l[s:])
        if len(left) < (size + 1):
            return [resp, left]
        else:
            return [resp] + self.split_msg(left, size, delim)

    def send_splitted_msg(self, bot, chat_id, msg, msg_limit=4095, reply_markup=-1, delim='\n'):
        l = self.split_msg(msg, msg_limit, delim)
        if len(l) > 3: bot.sendMessage(chat_id, text='–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏ –±—É–¥–µ—Ç –æ–±—Ä–µ–∑–∞–Ω')
        if reply_markup == -1:
            for r in l[:3]:
                bot.sendMessage(chat_id, text=r)
        else:
            for r in l[:3]:
                bot.sendMessage(chat_id, text=r, reply_markup=reply_markup)

    def msg_with_buttons(self, bot, update, text, options, chat_id=-1, message_id=-1):
        if chat_id == -1: chat_id = update.message.chat_id
        text = text[:4095]
        if len(options) > 0:
            buttons = [InlineKeyboardButton(o[0], callback_data=o[1][:30]) for o in options]
            keyboard = [[b] for b in buttons]  # customize form
            reply_markup = InlineKeyboardMarkup(keyboard)
            if message_id == -1:
                bot.sendMessage(chat_id=chat_id, text=text, reply_markup=reply_markup)
            else:
                bot.editMessageText(chat_id=chat_id, message_id=message_id, text=text, reply_markup=reply_markup)
        else:
            if message_id == -1:
                bot.sendMessage(chat_id=chat_id, text=text)
            else:
                bot.editMessageText(chat_id=chat_id, message_id=message_id, text=text)

    def spy(self, bot, update):
        try:
            user = update.message.from_user
        except:
            return False

        if str(user.username) == 'NikitaKuznetsov':
            return False

        txt = update.message.text

        logtxt = ["–°–ª–µ–∂–∫–∞ time!"
            , "Time: " + strftime("%Y-%m-%d %H:%M:%S")
            , "User: " + str(user.first_name) + ' ' + str(user.last_name)
            , "Username: @" + str(user.username)
            , "Chat_id: " + str(update.message.chat_id)
            , "Text: " + txt]

        with open(self.log_filename, "a") as log_file:
            log_file.write("\n" + "; ".join(logtxt))

    def slash_feedback(self, bot, update):
        self.spy(bot, update)
        chat_id = update.message.chat_id
        txt = update.message.text.strip()
        if txt.startswith('/feedback') and len(txt) > 9:
            with open(self.feedback_filename, "a") as feedback_file:
                feedback_file.write("\n" + txt[10:])
            bot.sendMessage(chat_id, text='–°–ø–∞—Å–∏–±–æ, —Å –∏–Ω—Ç–µ—Ä–µ—Å–æ–º –æ–∑–Ω–∞–∫–æ–º–ª—é—Å—å!')
        else:
            self.msg_with_buttons(bot, update,
                                  "–¢—ã –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å —É–ª—É—á—à–∏—Ç—å –±–æ—Ç–∞: –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, —á—Ç–æ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, —á—Ç–æ —Å—Ç–æ–∏–ª–æ –±—ã –¥–æ–±–∞–≤–∏—Ç—å. –í—Å—ë —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±—É–¥–µ—Ç —É—á—Ç–µ–Ω–æ. –ñ–º–∏ –∫–Ω–æ–ø–∫—É)",
                                  options=[['–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', 'feedback']])

    def slash_start(self, bot, update):
        self.spy(bot, update)
        chat_id = update.message.chat_id
        bot.sendMessage(chat_id, text=START_TEXT)

    def slash_help(self, bot, update):
        self.spy(bot, update)
        chat_id = update.message.chat_id
        bot.sendMessage(chat_id, text=HELP_TEXT)

    def slash_about(self, bot, update):
        self.spy(bot, update)
        bot.sendMessage(update.message.chat_id, text=ABOUT_TEXT)

    def slash_error(self, bot, update, error):
        logtxt = ('Update "%s" caused error "%s"' % (update, error))
        if 'Bad Request: Input message content is not specified' not in logtxt:
            print(logtxt)

    def inside_idle(self, bot, update, text=-1, chat_id=-1):
        if text == -1:
            text = update.message.text
        if chat_id == -1:
            chat_id = update.message.chat_id
        d = self.get_settings(chat_id)
        chat_state = d['chat_state']

        if chat_state == 'settings-city-add':
            txt = text.replace(';', ',').replace('.', ',').replace('\n', ',').split(',')
            d['city'] = list(set([i.strip().capitalize() for i in d['city'] + txt]))
            if '–ü–∏—Ç–µ—Ä' in d['city']:
                d['city'].remove('–ü–∏—Ç–µ—Ä')
                d['city'].append('–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥')
            if '–°–ø–±' in d['city']:
                d['city'].remove('–°–ø–±')
                d['city'].append('–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥')
            if '–ú—Å–∫' in d['city']:
                d['city'].remove('–ú—Å–∫')
                d['city'].append('–ú–æ—Å–∫–≤–∞')
            d['chat_state'] = ''
            self.set_settings(chat_id, d)
            resp = '–°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ —Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º–∏ –∫–æ–Ω—Ü–µ—Ä—Ç–∞–º–∏ –æ–±–Ω–æ–≤–ª—ë–Ω. –¢–µ–ø–µ—Ä—å –æ–Ω –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:\n' + ', '.join(
                d['city'])
            bot.sendMessage(chat_id, text=resp)
        elif chat_state == 'settings-follow-add':
            txt = text.replace('\n', ';').split(';')
            d['follow'] = list(set([i.strip().capitalize() for i in d['follow'] + txt]))
            d['chat_state'] = ''
            self.set_settings(chat_id, d)
            resp = '–°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º–∏ –Ω—É–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∫ –≤–∫ —Å–ª–µ–¥–∏—Ç—å, –æ–±–Ω–æ–≤–ª—ë–Ω. –¢–µ–ø–µ—Ä—å –æ–Ω –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:\n' + ', '.join(
                d['follow'])
            bot.sendMessage(chat_id, text=resp)
        elif chat_state == 'settings-unfollow-add':
            txt = text.replace('\n', ';').split(';')
            d['unfollow'] = list(set([i.strip().capitalize() for i in d['unfollow'] + txt]))
            d['chat_state'] = ''
            self.set_settings(chat_id, d)
            resp = '–°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, —á—å–∏ –∫–æ–Ω—Ü–µ—Ä—Ç—ã –Ω–µ –Ω—É–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å, –æ–±–Ω–æ–≤–ª—ë–Ω. –¢–µ–ø–µ—Ä—å –æ–Ω –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:\n' + ', '.join(
                d['unfollow'])
            bot.sendMessage(chat_id, text=resp)
        elif chat_state == 'feedback':
            with open(self.feedback_filename, "a") as feedback_file:
                feedback_file.write("\n" + text)
            bot.sendMessage(chat_id, text='–°–ø–∞—Å–∏–±–æ, —Å –∏–Ω—Ç–µ—Ä–µ—Å–æ–º –æ–∑–Ω–∞–∫–æ–º–ª—é—Å—å!')
            self.set_settings_field(chat_id, 'chat_state', '')
        elif chat_state == 'settings-vk-set':
            self.set_vk_profile(bot, chat_id, text)
        else:
            resp = self.get_resp_for_idle_text(text, cities=d['city'])
            bot.sendMessage(chat_id, text=resp)

    def get_resp_for_idle_text(self, text, cities=list(), chat_id=None):
        TEXT_IF_NOTHING_FOUND = u'–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å'
        if not cities:
            if not chat_id:
                cities = self.get_settings(chat_id)

        if 'vk.com/' in text:
            TOP_NUM = 10
            uid = self.get_user_id(text)
            url = 'https://vk.com/id%d' % uid
            resp = self.get_artists_popularity(uid, TOP_NUM)[1]
            if resp:
                resp = '–¢–æ–ø-%d –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π %s –ø–æ –∫–æ–ª-–≤—É —Ç—Ä–µ–∫–æ–≤:\n\n' % (TOP_NUM, url) + resp
            else:
                resp = TEXT_IF_NOTHING_FOUND
        else:
            concerts = self.get_concerts(text, log_print_freq=1)
            resp = self.get_text_from_concerts_list(concerts, cities)
            if resp is None or resp.strip() == '':
                resp = u'–ö–æ–Ω—Ü–µ—Ä—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ :('
        return resp

    def set_vk_profile(self, bot, chat_id, text):
        vk_info = self.get_user_info(text)
        vk_id = vk_info['uid']
        if not vk_id:
            bot.sendMessage(chat_id, text='–£–∫–∞–∂–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ –≤–∫. –£–∫–∞–∑–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑')
            return False
        d = self.get_settings(chat_id)
        d['vk']['id'] = vk_id
        d['vk']['name'] = vk_info['first_name'] + ' ' + vk_info['last_name']
        d['vk']['url'] = 'https://vk.com/id' + str(vk_id)
        d['chat_state'] = ''
        self.set_settings(chat_id, d)
        bot.sendMessage(chat_id, text='–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω. –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–±—è: https://vk.com/id%d' % vk_id)
        TOP_NUM = 10
        PRE_COMMENT = '–ú–∞–ª–µ–Ω—å–∫–∏–π –±–æ–Ω—É—Å, —Ç–æ–ø-%d –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –ø–æ —Ç–≤–æ–∏–º –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—è–º:\n\n' % TOP_NUM
        POST_COMMENT = '\n\n–¢—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ø –∏ –ø–æ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º VK, –ø—Ä–æ—Å—Ç–æ –∫–∏–¥–∞–π —Å—é–¥–∞ –Ω–∞ –Ω–∏—Ö —Å—Å—ã–ª–∫—É. –ò–º–µ–Ω–Ω–æ —Å—Å—ã–ª–∫—É'
        audios_top = self.get_artists_popularity(vk_id, TOP_NUM)[1]
        if audios_top:
            bot.sendMessage(chat_id, text=PRE_COMMENT + audios_top + POST_COMMENT)
        return True

    def idle_main(self, bot, update):
        self.spy(bot, update)
        self.inside_idle(bot, update)

    #### settings large menu

    def check_settings_existance(self, chat_id):
        return os.path.exists('userdata/settings/%d.txt' % chat_id)

    def set_settings(self, chat_id, d=-1):
        try:
            f = open('userdata/settings/' + str(chat_id) + '.txt', 'w')
            if d == -1:
                d = self.DEFAULT_SETTINGS
            f.write(str(d))
        except:
            return False
        return True

    def get_settings(self, chat_id):
        try:
            f = open('userdata/settings/' + str(chat_id) + '.txt')
            d = eval(f.read())
        except:
            f = open('userdata/settings/' + str(chat_id) + '.txt', 'w')
            d = self.DEFAULT_SETTINGS
            f.write(str(d))
        return d

    def set_settings_field(self, chat_id, field, value):
        try:
            d = self.get_settings(chat_id)
            d[field] = value
            return self.set_settings(chat_id, d)
        except:
            return False

    def button(self, bot, update, txt=None):
        query = update.callback_query
        if not txt:
            txt = query.data
        chat_id = query.message.chat_id

        if txt in {'download_concerts_no', 'download_concerts_vk_no'}:
            bot.sendMessage(chat_id, '–•–æ—Ä–æ—à–æ, –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑.')
            return True
        if txt == 'feedback':
            self.set_settings_field(chat_id, 'chat_state', 'feedback')
            bot.sendMessage(chat_id, '–ö–ª–∞—Å—Å–Ω–æ, –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å')
            return True
        if txt == 'download_concerts_yes':
            user_settings = self.get_settings(chat_id)
            vk_uid = user_settings['vk']['id']
            if not vk_uid:
                self.msg_with_buttons(bot=bot,
                                      update=update,
                                      text='–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å VK. –ú–æ–∂–µ—à—å —Å–µ–π—á–∞—Å —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?',
                                      options=[['–î–∞', 'download_concerts_vk_yes'], ['–ù–µ—Ç', 'download_concerts_vk_no']],
                                      chat_id=chat_id)
                return True
            self.download_and_show(bot, chat_id)
            return True
        if txt == 'download_concerts_vk_yes':
            bot.sendMessage(chat_id, '–ö–∏–¥–∞–π —Å—Å—ã–ª–∫—É –Ω–∞ —Å–µ–±—è –≤–∫–æ–Ω—Ç–∞–∫—Ç–µ. –ò–ª–∏ id. –ò–ª–∏ –Ω–∏–∫–Ω–µ–π–º.')
            self.set_settings_field(chat_id, 'chat_state', 'download_concerts_vk_yes_waiting')
            return True
        text, options = self.settings_menu(txt, chat_id, bot)
        if len(text) > 0: self.msg_with_buttons(bot, update, text, options, chat_id, query.message.message_id)
        return True

    def download_and_show(self, bot, chat_id):
        bot.sendMessage(chat_id, '—Ç–∏–ø–∞ —Å–∫–∞—á–∞–ª')

    def settings_menu(self, q, chat_id, bot):
        # ad-hoc func for inline button(): defines which text and buttons to send depending on entry inline query
        text = ''
        options = []
        if not self.check_settings_existance(chat_id):
            self.set_settings(chat_id)
        d = self.get_settings(chat_id)
        if q == 's':
            text = '–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:'
            text += '\n* –ì–æ—Ä–æ–¥–∞: '
            if len(d['city']) == 0:
                text += '–≤—Å–µ'
            else:
                text += ", ".join(d['city'])
            text += '\n* –ü—Ä–æ—Ñ–∏–ª—å'
            if d['vk']['id'] is None:
                text += ' –Ω–∞ vk.com: –Ω–µ —É–∫–∞–∑–∞–Ω'
            else:
                text += ': ' + d['vk']['name'] + ' (https://vk.com/id' + str(d['vk']['id']) + ')'
            text += '\n* –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: '
            if not d['follow']:
                text += '–ø—É—Å—Ç–æ'
            elif len(d['follow']) > 4:
                text += str(len(d['follow'])) + ' –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π'
            else:
                text += '; '.join(d['follow'])
            text += '\n* –ù–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: '
            if not d['unfollow']:
                text += '–ø—É—Å—Ç–æ'
            elif len(d['unfollow']) > 4:
                text += str(len(d['unfollow'])) + ' –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π'
            else:
                text += '; '.join(d['unfollow'])
            options.append(['–ì–æ—Ä–æ–¥–∞', 'city'])
            options.append(['–ü—Ä–æ—Ñ–∏–ª—å vk', 'vk'])
            options.append(['–°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π', 'artists'])
        # cities story
        elif q == 's-city':
            text = '–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ —Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º–∏ –∫–æ–Ω—Ü–µ—Ä—Ç–∞–º–∏'
            options.append(['–î–æ–±–∞–≤–∏—Ç—å', 'add'])
            if len(d['city']) > 0:
                text += '. –í—ã–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞: %s' % ', '.join(d['city'])
                options.append(['–£–¥–∞–ª–∏—Ç—å', 'del'])
                options.append(['–£–¥–∞–ª–∏—Ç—å –≤—Å–µ', 'delall'])
        elif q == 's-city-add':
            self.set_settings_field(chat_id, 'chat_state', 'settings-city-add')
            bot.sendMessage(chat_id,
                            text='–ö–∞–∫–æ–π –≥–æ—Ä–æ–¥ –¥–æ–±–∞–≤–∏—Ç—å? –ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ, –Ω–æ —Ç–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n–ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥')
        elif q == 's-city-del':
            text = '–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∫–æ–Ω—Ü–µ—Ä—Ç—ã –±–æ–ª–µ–µ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å?'
            for city in d['city']:
                options.append([city, city])
        elif q == 's-city-delall':
            d['city'] = []
            self.set_settings(chat_id, d)
            text = '–°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –æ—á–∏—â–µ–Ω'
        elif q.startswith('s-city-del-'):
            city_to_delete = q[11:]
            cities = set(d['city'])
            try:
                cities.remove(city_to_delete)
            except:
                pass
            d['city'] = list(cities)
            self.set_settings(chat_id, d)
            text = '–ì–æ—Ä–æ–¥ %s —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –≥–æ—Ä–æ–¥–æ–≤' % city_to_delete
        # vk profile story
        elif q == 's-vk':
            if d['vk']['id'] is not None:
                text = '–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å: ' + d['vk']['name'] + ' (https://vk.com/id' + str(d['vk']['id']) + ')'
                options.append(['–ò–∑–º–µ–Ω–∏—Ç—å', 'set'])
                options.append(['–£–¥–∞–ª–∏—Ç—å', 'del'])
            else:
                text = '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω'
                options.append(['–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', 'set'])
        elif q == 's-vk-set':
            self.set_settings_field(chat_id, 'chat_state', 'settings-vk-set')
            bot.sendMessage(chat_id, text='–ö–∏–¥–∞–π —Å—Å—ã–ª–∫—É –Ω–∞ —Å–µ–±—è –≤–∫–æ–Ω—Ç–∞–∫—Ç–µ. –ò–ª–∏ id. –ò–ª–∏ –Ω–∏–∫–Ω–µ–π–º.')
        elif q == 's-vk-del':
            d['vk']['id'] = None
            self.set_settings(chat_id, d)
            try:
                os.remove('userdata/concerts/%d.json' % chat_id)
            except:
                pass
            text = '–ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª—ë–Ω. –ú–æ–∂–µ—à—å —É–∫–∞–∑–∞—Ç—å –µ–≥–æ –≤–Ω–æ–≤—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—Ç—Å—è'
        # artists set story
        elif q == 's-artists':
            text = '–í–Ω–æ—Å–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, –ø–æ–¥–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∏–∑ —Ç–≤–æ–∏—Ö –∞—É–¥–∏–æ –≤–∫. –£–∫–∞–∂–∏, –∫–æ–≥–æ —Å—Ç–æ–∏—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å, –¥–∞–∂–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∞—É–¥–∏–æ –≤–∫, –∏ –∫–æ–≥–æ –Ω–µ —Å—Ç–æ–∏—Ç, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Ç–æ, —á—Ç–æ –æ–Ω —Ç–∞–º –µ—Å—Ç—å. '
            options.append(['–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å', 'follow'])
            options.append(['–ù–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å', 'unfollow'])
        elif q == 's-artists-follow':
            text = '–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º–∏ —Å—Ç–æ–∏—Ç —Å–ª–µ–¥–∏—Ç—å –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤ —Å–ø–∏—Å–∫–µ –∞—É–¥–∏–æ –≤–∫'
            options.append(['–î–æ–±–∞–≤–∏—Ç—å', 'add'])
            if len(d['follow']) == 0:
                text += ', –ø—É—Å—Ç'
            else:
                text += ': %s' % ', '.join(d['follow'])
                options.append(['–£–¥–∞–ª–∏—Ç—å', 'del'])
                options.append(['–£–¥–∞–ª–∏—Ç—å –≤—Å–µ', 'delall'])
        elif q == 's-artists-follow-add':
            self.set_settings_field(chat_id, 'chat_state', 'settings-follow-add')
            bot.sendMessage(chat_id,
                            text='–ö–∞–∫–∏—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å—Ç–æ–∏—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å? –ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ, –Ω–æ —Ç–æ–≥–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–¥–µ–ª–∏ –∏—Ö —Ç–æ—á–∫–æ–π —Å –∑–∞–ø—è—Ç–æ–π, –∏–Ω–∞—á–µ —è –∏—Ö –Ω–µ –Ω–∞–π–¥—É. –ù–∞–ø—Ä–∏–º–µ—Ä,\nBeatles; Rolling Stones')
        elif q == 's-artists-follow-del':
            text = '–ß—å–∏ –∫–æ–Ω—Ü–µ—Ä—Ç—ã –±–æ–ª—å—à–µ –Ω–µ –Ω–∞–¥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å?'
            for artist in d['follow']:
                options.append([artist, artist])
        elif q == 's-artists-follow-delall':
            d['follow'] = []
            self.set_settings(chat_id, d)
            text = '–°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—á–∏—â–µ–Ω'
        elif q == 's-artists-unfollow':
            text = '–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, —á—å–∏ –∫–æ–Ω—Ü–µ—Ä—Ç—ã –Ω–µ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å'
            options.append(['–î–æ–±–∞–≤–∏—Ç—å', 'add'])
            if len(d['unfollow']) == 0:
                text += ', –ø—É—Å—Ç'
            else:
                text += ': %s' % ', '.join(d['unfollow'])
                options.append(['–£–¥–∞–ª–∏—Ç—å', 'del'])
                options.append(['–£–¥–∞–ª–∏—Ç—å –≤—Å–µ', 'delall'])
        elif q == 's-artists-unfollow-add':
            self.set_settings_field(chat_id, 'chat_state', 'settings-unfollow-add')
            bot.sendMessage(chat_id,
                            text='–ß—å–∏ –∫–æ–Ω—Ü–µ—Ä—Ç—ã —Å—Ç–æ–∏—Ç —Å–∫—Ä—ã–≤–∞—Ç—å –∏–∑ –≤—ã–¥–∞—á–∏? –ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ, –Ω–æ —Ç–æ–≥–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–¥–µ–ª–∏ –∏—Ö —Ç–æ—á–∫–æ–π —Å –∑–∞–ø—è—Ç–æ–π, –∏–Ω–∞—á–µ —è –∏—Ö –Ω–µ –Ω–∞–π–¥—É. –ù–∞–ø—Ä–∏–º–µ—Ä,\nBeatles; Rolling Stones')
        elif q == 's-artists-unfollow-del':
            text = '–ß—å–∏ –∫–æ–Ω—Ü–µ—Ä—Ç—ã –±–æ–ª—å—à–µ –Ω–µ –Ω–∞–¥–æ —Å–∫—Ä—ã–≤–∞—Ç—å –∏–∑ –≤—ã–¥–∞—á–∏?'
            for artist in d['unfollow']:
                options.append([artist, artist])
        elif q == 's-artists-unfollow-delall':
            d['unfollow'] = []
            self.set_settings(chat_id, d)
            text = '–°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—á–∏—â–µ–Ω'

        # adding path for every command
        for o in options:
            o[1] = q + '-' + str(o[1])
        # adding 'back' button to all menu's but start menu
        if q != 's':
            options = [['‚¨Ö', '-'.join(q.split('-')[:-1])]] + options
        return (text, options)

    def slash_settings(self, bot, update):
        text, options = self.settings_menu('s', update.message.chat_id, bot)
        self.msg_with_buttons(bot, update, text, options)

    def inlinequery(self, bot, update):
        query = update.inline_query.query
        results = list()
        chat_id = update.inline_query.from_user.id

        resp = self.get_resp_for_idle_text(query, chat_id=chat_id)
        results.append(
            InlineQueryResultArticle(id=uuid4(), title=resp, input_message_content=InputTextMessageContent(resp)))
        update.inline_query.answer(results)

    def main(self):
        # Create the EventHandler and pass it your bot's token.
        updater = Updater(self.TG_TOKEN)

        # Get the dispatcher to register handlers
        dp = updater.dispatcher
        updater.dispatcher.add_handler(CallbackQueryHandler(self.button))

        # on different commands - answer in Telegram
        dp.add_handler(CommandHandler("start", self.slash_start), group=0)
        dp.add_handler(CommandHandler("help", self.slash_help), group=0)
        dp.add_handler(CommandHandler("feedback", self.slash_feedback), group=0)
        dp.add_handler(CommandHandler("about", self.slash_about), group=0)
        dp.add_handler(CommandHandler("settings", self.slash_settings), group=0)

        # on noncommand message
        dp.add_handler(MessageHandler(Filters.text, self.idle_main))
        dp.add_handler(InlineQueryHandler(self.inlinequery))

        # log all errors
        dp.add_error_handler(self.slash_error)

        # Start the Bot
        updater.start_polling()

        # Run the bot
        updater.idle()


class TelegramWrapperDefault(TelegramWrapper):
    def __init__(self):
        TG_TOKEN = json.loads(open(get_full_path('telegram_wrapper/workdata/credentials.json')).read())['tg_bot_token']
        log_filename = get_full_path('telegram_wrapper/workdata/log.txt')
        feedback_filename = get_full_path('telegram_wrapper/workdata/feedback.txt')
        TelegramWrapper.__init__(self, TG_TOKEN=TG_TOKEN, log_filename=log_filename,
                                 feedback_filename=feedback_filename)
